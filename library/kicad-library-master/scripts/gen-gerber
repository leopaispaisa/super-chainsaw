#!/usr/bin/env python

import sys
import os
import argparse
import logging
import os.path
import zipfile
import tempfile
import glob
import shutil


from pcbnew import *

class Application():

    gerber_spec = {
        "gtl" : {"layers" : [F_Cu], "desc" : "Copper - Top"},
        "gl2" : {"layers" : [In1_Cu], "desc" : "Copper - Layer 2"},
        "gl3" : {"layers" : [In2_Cu], "desc" : "Copper - Layer 3"},
        "gbl" : {"layers" : [B_Cu], "desc" : "Copper - Bottom"},
        "gts" : {"layers" : [F_Mask], "desc" : "Soldermask - Top"},
        "gto" : {"layers" : [F_SilkS], "desc" : "Legend - Top"},
        "gbs" : {"layers" : [B_Mask], "desc" : "Soldermask - Bottom"},
        "gbo" : {"layers" : [B_SilkS], "desc" : "Legend - Bottom"},
        "gko" : {"layers" : [Edge_Cuts], "desc" : "Profile"},
    }
    
    
    

    def __init__(self):
        logging.basicConfig(format="%(levelname)s: %(message)s")
        self.logger = logging.getLogger()
        
        parser = argparse.ArgumentParser(description="Converts a kicad pcb to gerber files.")
        
        parser.add_argument( "--output-dir", "-d", help="The output directory, relative to the directory the board file is in.  Defaults to the same directory the board file is in." )
        parser.add_argument( "--zip", help="Put the output gerber files in a zip file", action="store_true" )
        parser.add_argument( "--gen-drill-map", help="Generate drill map", action="store_true" )
        parser.add_argument( "--merge-npth", "-m", help="Merge NPTH and PTH in a single drill file", action="store_true" )
        parser.add_argument( "--exclude-edge", "-e", help="Exclude edge layer", action="store_true" )

        
        parser.add_argument("filename", help="kicad pcb file")

        self.args = parser.parse_args()
        
        
    def run(self):
        
        try:
            ## Load board ##
            self.board = LoadBoard(self.args.filename);
            self.boardname = os.path.splitext( os.path.basename( self.args.filename ))[0]

            ## Read pcb plotter settings ##
            pcb_popt = self.board.GetPlotOptions()            
            
            ## Set plotter output directory ##
            self.output_dir = self.args.output_dir or pcb_popt.GetOutputDirectory() or "gerber"
            self.full_output_dir = os.path.join( os.path.dirname( os.path.abspath( self.args.filename )), self.output_dir )

            if self.args.zip:
                self.zip_tmp_dir = tempfile.mkdtemp( prefix="gen-gerber-" + self.boardname )
            
            self.plot()
            self.gen_drill()
            
            if self.args.zip:
                zip_filename = os.path.join( self.full_output_dir, self.boardname ) + ".zip"
                
                zipf = zipfile.ZipFile( zip_filename, 'w' )
                
                for root, dirs, files in os.walk( self.zip_tmp_dir ):
                    for fn in files:
                        zipf.write(os.path.join( root, fn ), os.path.basename( fn ))
            
                shutil.rmtree( self.zip_tmp_dir )
           
                               
            
        except IOError as err:
            self.logger.error("Unable to load board file %s" % self.args.filename)
            return
    
    
    def plot(self):
        
        pctl = PLOT_CONTROLLER( self.board )
        popt = pctl.GetPlotOptions()
        
        if ( self.args.zip ):
            
            popt.SetOutputDirectory( self.zip_tmp_dir )
        else:
            popt.SetOutputDirectory( self.output_dir )


        popt.SetPlotFrameRef( False )
        popt.SetLineWidth( FromMM( 0.35 ))
        
        popt.SetAutoScale( False )
        popt.SetScale( 1 )
        popt.SetMirror( False )
        popt.SetUseGerberAttributes( False )
        popt.SetExcludeEdgeLayer( self.args.exclude_edge );
        popt.SetScale( 1 )
        popt.SetUseAuxOrigin( False )
        popt.SetSubtractMaskFromSilk( False )

            
        ## Create the output directory if it does not exists ##
        if not os.path.exists( self.output_dir ):
            os.makedirs( self.output_dir )
        
        for ext, spec in self.gerber_spec.iteritems():
            
            self.logger.debug( "Plotting: %s, Layers: %s, Filename: %s" % (
                               spec[ "desc" ], str( spec[ "layers" ]),
                                self.boardname + "." + ext ))
            
            pctl.SetLayer( spec[ "layers" ][ 0 ] )
            pctl.OpenPlotfile( "", PLOT_FORMAT_GERBER, spec[ "desc" ], ext )

            for layer in spec[ "layers" ]:
                pctl.SetLayer( layer )
                pctl.PlotLayer()

            pctl.ClosePlot()

    def gen_drill(self):
        
        
        drlwriter = EXCELLON_WRITER( self.board )
        
        drlwriter.SetMapFileFormat( PLOT_FORMAT_PDF )
  
        mirror = False
        minimalHeader = True
        offset = wxPoint(0,0)
        drlwriter.SetOptions( mirror, minimalHeader, offset, self.args.merge_npth )
        
        metricFmt = False
        drlwriter.SetFormat( metricFmt, EXCELLON_WRITER.SUPPRESS_LEADING )
        
        drlwriter.CreateDrillandMapFilesSet( self.output_dir, True, self.args.gen_drill_map );
        

if __name__=="__main__":
    app = Application()
    app.run()
